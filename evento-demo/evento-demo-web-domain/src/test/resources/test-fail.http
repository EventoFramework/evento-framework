POST http://localhost:9001/api/demo/
Content-Type: application/json

{
  "demoId": "001",
  "name": null,
  "value": 5
}

###
GET http://localhost:9001/api/util/send?failStage=INVOKER
Accept: application/json

> {%
    client.test("Assert Proper Exception", () => {
        client.assert(response.status == 400, "Response status is not 400")
        client.assert(response.body.error == 'InvalidCommandException', "Error is not 'InvalidCommandException'")
    })
%}
###
GET http://localhost:9001/api/util/send-wait?failStage=INVOKER
Accept: application/json

> {%
    client.test("Assert Proper Exception", () => {
        client.assert(response.status == 400, "Response status is not 400")
        client.assert(response.body.error == 'InvalidCommandException', "Error is not 'InvalidCommandException'")
    })
%}
###
GET http://localhost:9001/api/util/send?failStage=GATEWAY
Accept: application/json

> {%
    client.test("Assert Proper Exception", () => {
        client.assert(response.status == 400, "Response status is not 400")
        client.assert(response.body.error == 'InvalidCommandException', "Error is not 'InvalidCommandException'")
    })
%}
###
GET http://localhost:9001/api/util/send-wait?failStage=GATEWAY
Accept: application/json

> {%
    client.test("Assert Proper Exception", () => {
        client.assert(response.status == 400, "Response status is not 400")
        client.assert(response.body.error == 'InvalidCommandException', "Error is not 'InvalidCommandException'")
    })
%}
###
GET http://localhost:9001/api/util/send?failStage=BEFORE_HANDLING
Accept: application/json

> {%
    client.test("Assert Proper Exception", () => {
        client.assert(response.status == 400, "Response status is not 400")
        client.assert(response.body.error == 'InvalidCommandException', "Error is not 'InvalidCommandException'")
    })
%}
###
GET http://localhost:9001/api/util/send-wait?failStage=BEFORE_HANDLING
Accept: application/json

> {%
    client.test("Assert Proper Exception", () => {
        client.assert(response.status == 400, "Response status is not 400")
        client.assert(response.body.error == 'InvalidCommandException', "Error is not 'InvalidCommandException'")
    })
%}
###
GET http://localhost:9001/api/util/send?failStage=HANDLING
Accept: application/json

> {%
    client.test("Assert Proper Exception", () => {
        client.assert(response.status == 400, "Response status is not 400")
        client.assert(response.body.error == 'InvalidCommandException', "Error is not 'InvalidCommandException'")
    })
%}
###
GET http://localhost:9001/api/util/send-wait?failStage=HANDLING
Accept: application/json

> {%
    client.test("Assert Proper Exception", () => {
        client.assert(response.status == 400, "Response status is not 400")
        client.assert(response.body.error == 'InvalidCommandException', "Error is not 'InvalidCommandException'")
    })
%}
###
GET http://localhost:9001/api/util/send?failStage=AFTER_HANDLING
Accept: application/json

> {%
    client.test("Assert Proper Exception", () => {
        client.assert(response.status == 400, "Response status is not 400")
        client.assert(response.body.error == 'InvalidCommandException', "Error is not 'InvalidCommandException'")
    })
%}
###
GET http://localhost:9001/api/util/send-wait?failStage=AFTER_HANDLING
Accept: application/json

> {%
    client.test("Assert Proper Exception", () => {
        client.assert(response.status == 400, "Response status is not 400")
        client.assert(response.body.error == 'InvalidCommandException', "Error is not 'InvalidCommandException'")
    })
%}
###
GET http://localhost:9001/api/util/send?failStage=AFTER_HANDLING_EXCEPTION
Accept: application/json

> {%
    client.test("Assert Proper Exception", () => {
        client.assert(response.status == 400, "Response status is not 400")
        client.assert(response.body.error == 'InvalidCommandException', "Error is not 'InvalidCommandException'")
    })
%}
###
GET http://localhost:9001/api/util/send-wait?failStage=AFTER_HANDLING_EXCEPTION
Accept: application/json

> {%
    client.test("Assert Proper Exception", () => {
        client.assert(response.status == 400, "Response status is not 400")
        client.assert(response.body.error == 'InvalidCommandException', "Error is not 'InvalidCommandException'")
    })
%}